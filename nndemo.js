// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var argmax, zip;
    zip = function() {
      var arr, i, j, length, lengthArray, ref, results;
      lengthArray = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = arguments.length; j < len; j++) {
          arr = arguments[j];
          results.push(arr.length);
        }
        return results;
      }).apply(this, arguments);
      length = Math.min.apply(Math, lengthArray);
      results = [];
      for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, len, results1;
          results1 = [];
          for (k = 0, len = arguments.length; k < len; k++) {
            arr = arguments[k];
            results1.push(arr[i]);
          }
          return results1;
        }).apply(this, arguments));
      }
      return results;
    };
    argmax = function(list) {
      var i, j, pos, val;
      val = list[0];
      pos = 0;
      for (i = j = 0; j < 10; i = ++j) {
        if (list[i] > val) {
          val = list[i];
          pos = i;
        }
      }
      return pos;
    };
    return $("#button").on("click", function() {
      var avg_pixel, b, bias, data, func, i, input_canvas, input_ctx, j, k, l, len, nn_guess, nn_image, nn_input, output_canvas, output_ctx, output_image, ref, ref1, ref2, ref3, size, w, weights, z_matrix;
      input_canvas = document.getElementById("tools_sketch");
      input_ctx = input_canvas.getContext("2d");
      output_canvas = document.getElementById("output");
      output_ctx = output_canvas.getContext("2d");
      output_ctx.rect(0, 0, output_canvas.width, output_canvas.height);
      output_ctx.fillStyle = '#FFFFFF';
      output_ctx.fill();
      output_ctx.drawImage(input_canvas, 0, 0, 28, 28);
      output_image = output_ctx.getImageData(0, 0, 28, 28);
      nn_image = output_image.data;
      nn_input = [];
      for (i = j = 0, ref = nn_image.length; j < ref; i = j += 4) {
        avg_pixel = (nn_image[i] + nn_image[i + 1] + nn_image[i + 2]) / 3;
        avg_pixel = (255.0 - avg_pixel) / 255.0;
        nn_input.push(avg_pixel);
      }
      data = nn_json;
      bias = [];
      weights = [];
      size = data.size;
      for (i = k = 0, ref1 = size.length - 1; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
        bias.push(math.matrix(data.bias[i]));
        weights.push(math.matrix(data.weights[i]));
      }
      z_matrix = math.matrix(nn_input);
      z_matrix = math.resize(z_matrix, [nn_input.length, 1]);
      ref2 = zip(weights, bias);
      for (l = 0, len = ref2.length; l < len; l++) {
        ref3 = ref2[l], w = ref3[0], b = ref3[1];
        z_matrix = math.multiply(w, z_matrix);
        z_matrix = math.add(z_matrix, b);
        z_matrix = math.map(z_matrix, func = function(val) {
          return math.tanh(val);
        });
      }
      nn_guess = math.resize(z_matrix, [10]);
      console.log(math.format(nn_guess, 14));
      nn_guess = argmax(nn_guess._data);
      return console.log(math.format(nn_guess, 14));
    });
  });

}).call(this);
